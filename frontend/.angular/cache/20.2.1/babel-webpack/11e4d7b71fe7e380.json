{"ast":null,"code":"import _asyncToGenerator from \"/mnt/c/Users/aluta/station-tracker/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, Build, h, Host } from '@stencil/core/internal/client';\nimport { shouldUseCloseWatcher } from './hardware-back-button.js';\nimport { c as config, p as printIonWarning } from './index4.js';\nimport { b as getIonMode, a as isPlatform } from './ionic-global.js';\nconst appCss = \"html.plt-mobile ion-app{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}html.plt-mobile ion-app [contenteditable]{-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}ion-app.force-statusbar-padding{--ion-safe-area-top:20px}\";\nconst App = /*@__PURE__*/proxyCustomElement(class App extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n  }\n  componentDidLoad() {\n    var _this = this;\n    if (Build.isBrowser) {\n      rIC(/*#__PURE__*/_asyncToGenerator(function* () {\n        const isHybrid = isPlatform(window, 'hybrid');\n        if (!config.getBoolean('_testing')) {\n          import('./index7.js').then(module => module.startTapClick(config));\n        }\n        if (config.getBoolean('statusTap', isHybrid)) {\n          import('./status-tap.js').then(module => module.startStatusTap());\n        }\n        if (config.getBoolean('inputShims', needInputShims())) {\n          /**\n           * needInputShims() ensures that only iOS and Android\n           * platforms proceed into this block.\n           */\n          const platform = isPlatform(window, 'ios') ? 'ios' : 'android';\n          import('./input-shims.js').then(module => module.startInputShims(config, platform));\n        }\n        const hardwareBackButtonModule = yield import('./hardware-back-button.js');\n        const supportsHardwareBackButtonEvents = isHybrid || shouldUseCloseWatcher();\n        if (config.getBoolean('hardwareBackButton', supportsHardwareBackButtonEvents)) {\n          hardwareBackButtonModule.startHardwareBackButton();\n        } else {\n          /**\n           * If an app sets hardwareBackButton: false and experimentalCloseWatcher: true\n           * then the close watcher will not be used.\n           */\n          if (shouldUseCloseWatcher()) {\n            printIonWarning('[ion-app] - experimentalCloseWatcher was set to `true`, but hardwareBackButton was set to `false`. Both config options must be `true` for the Close Watcher API to be used.');\n          }\n          hardwareBackButtonModule.blockHardwareBackButton();\n        }\n        if (typeof window !== 'undefined') {\n          import('./keyboard.js').then(module => module.startKeyboardAssist(window));\n        }\n        import('./focus-visible.js').then(module => _this.focusVisible = module.startFocusVisible());\n      }));\n    }\n  }\n  /**\n   * Used to set focus on an element that uses `ion-focusable`.\n   * Do not use this if focusing the element as a result of a keyboard\n   * event as the focus utility should handle this for us. This method\n   * should be used when we want to programmatically focus an element as\n   * a result of another user action. (Ex: We focus the first element\n   * inside of a popover when the user presents it, but the popover is not always\n   * presented as a result of keyboard action.)\n   *\n   * @param elements An array of HTML elements to set focus on.\n   */\n  setFocus(elements) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      if (_this2.focusVisible) {\n        _this2.focusVisible.setFocus(elements);\n      }\n    })();\n  }\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: '9be440c65819e4fa67c2c3c6477ab40b3ad3eed3',\n      class: {\n        [mode]: true,\n        'ion-page': true,\n        'force-statusbar-padding': config.getBoolean('_forceStatusbarPadding')\n      }\n    });\n  }\n  get el() {\n    return this;\n  }\n  static get style() {\n    return appCss;\n  }\n}, [256, \"ion-app\", {\n  \"setFocus\": [64]\n}]);\nconst needInputShims = () => {\n  /**\n   * iOS always needs input shims\n   */\n  const needsShimsIOS = isPlatform(window, 'ios') && isPlatform(window, 'mobile');\n  if (needsShimsIOS) {\n    return true;\n  }\n  /**\n   * Android only needs input shims when running\n   * in the browser and only if the browser is using the\n   * new Chrome 108+ resize behavior: https://developer.chrome.com/blog/viewport-resize-behavior/\n   */\n  const isAndroidMobileWeb = isPlatform(window, 'android') && isPlatform(window, 'mobileweb');\n  if (isAndroidMobileWeb) {\n    return true;\n  }\n  return false;\n};\nconst rIC = callback => {\n  if ('requestIdleCallback' in window) {\n    window.requestIdleCallback(callback);\n  } else {\n    setTimeout(callback, 32);\n  }\n};\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-app\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-app\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, App);\n        }\n        break;\n    }\n  });\n}\nconst IonApp = App;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonApp, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}