{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { E as ENABLE_HTML_CONTENT_DEFAULT, a as sanitizeDOMString } from './config.js';\nimport { p as arrowDown, q as caretBackSharp } from './index6.js';\nimport { c as config } from './index4.js';\nimport { b as getIonMode } from './ionic-global.js';\nimport { e as supportsRubberBandScrolling } from './refresher.utils.js';\nimport { d as defineCustomElement$2, S as SPINNERS } from './spinner.js';\nimport { d as defineCustomElement$3 } from './icon.js';\nconst RefresherContent = /*@__PURE__*/proxyCustomElement(class RefresherContent extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n  }\n  componentWillLoad() {\n    if (this.pullingIcon === undefined) {\n      /**\n       * The native iOS refresher uses a spinner instead of\n       * an icon, so we need to see if this device supports\n       * the native iOS refresher.\n       */\n      const hasRubberBandScrolling = supportsRubberBandScrolling();\n      const mode = getIonMode(this);\n      const overflowRefresher = hasRubberBandScrolling ? 'lines' : arrowDown;\n      this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && hasRubberBandScrolling ? config.get('spinner', overflowRefresher) : 'circular');\n    }\n    if (this.refreshingSpinner === undefined) {\n      const mode = getIonMode(this);\n      this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n    }\n  }\n  renderPullingText() {\n    const {\n      customHTMLEnabled,\n      pullingText\n    } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", {\n        class: \"refresher-pulling-text\",\n        innerHTML: sanitizeDOMString(pullingText)\n      });\n    }\n    return h(\"div\", {\n      class: \"refresher-pulling-text\"\n    }, pullingText);\n  }\n  renderRefreshingText() {\n    const {\n      customHTMLEnabled,\n      refreshingText\n    } = this;\n    if (customHTMLEnabled) {\n      return h(\"div\", {\n        class: \"refresher-refreshing-text\",\n        innerHTML: sanitizeDOMString(refreshingText)\n      });\n    }\n    return h(\"div\", {\n      class: \"refresher-refreshing-text\"\n    }, refreshingText);\n  }\n  render() {\n    const pullingIcon = this.pullingIcon;\n    const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n    const mode = getIonMode(this);\n    return h(Host, {\n      key: 'e235f8a9a84070ece2e2066ced234a64663bfa1d',\n      class: mode\n    }, h(\"div\", {\n      key: '9121691818ddaa35801a5f442e144ac27686cf19',\n      class: \"refresher-pulling\"\n    }, this.pullingIcon && hasSpinner && h(\"div\", {\n      key: 'c8d65d740f1575041bd3b752c789077927397fe4',\n      class: \"refresher-pulling-icon\"\n    }, h(\"div\", {\n      key: '309dd904977eaa788b09ea95b7fa4996a73bec5b',\n      class: \"spinner-arrow-container\"\n    }, h(\"ion-spinner\", {\n      key: 'a2a1480f67775d56ca7822e76be1e9f983bca2f9',\n      name: this.pullingIcon,\n      paused: true\n    }), mode === 'md' && this.pullingIcon === 'circular' && h(\"div\", {\n      key: '811d7e06d324bf4b6a18a31427a43e5177f3ae3a',\n      class: \"arrow-container\"\n    }, h(\"ion-icon\", {\n      key: '86cc48e2e8dc054ff6ff1299094da35b524be63d',\n      icon: caretBackSharp,\n      \"aria-hidden\": \"true\"\n    })))), this.pullingIcon && !hasSpinner && h(\"div\", {\n      key: '464ae097dbc95c18a2dd7dfd03f8489153dab719',\n      class: \"refresher-pulling-icon\"\n    }, h(\"ion-icon\", {\n      key: 'ed6875978b9035add562caa743a68353743d978f',\n      icon: this.pullingIcon,\n      lazy: false,\n      \"aria-hidden\": \"true\"\n    })), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", {\n      key: 'aff891924e44354543fec484e5cde1ca92e69904',\n      class: \"refresher-refreshing\"\n    }, this.refreshingSpinner && h(\"div\", {\n      key: '842d7ac4ff10a1058775493d62f31cbdcd34f7a0',\n      class: \"refresher-refreshing-icon\"\n    }, h(\"ion-spinner\", {\n      key: '8c3e6195501e7e78d5cde1e3ad1fef90fd4a953f',\n      name: this.refreshingSpinner\n    })), this.refreshingText !== undefined && this.renderRefreshingText()));\n  }\n  get el() {\n    return this;\n  }\n}, [256, \"ion-refresher-content\", {\n  \"pullingIcon\": [1025, \"pulling-icon\"],\n  \"pullingText\": [1, \"pulling-text\"],\n  \"refreshingSpinner\": [1025, \"refreshing-spinner\"],\n  \"refreshingText\": [1, \"refreshing-text\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-refresher-content\", \"ion-icon\", \"ion-spinner\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-refresher-content\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, RefresherContent);\n        }\n        break;\n      case \"ion-icon\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$3();\n        }\n        break;\n      case \"ion-spinner\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n        break;\n    }\n  });\n}\nconst IonRefresherContent = RefresherContent;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonRefresherContent, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}