{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { getAssetPath, proxyCustomElement, HTMLElement, Build, h, Host } from '@stencil/core/internal/client';\nlet CACHED_MAP;\nconst getIconMap = () => {\n  if (typeof window === 'undefined') {\n    return new Map();\n  } else {\n    if (!CACHED_MAP) {\n      const win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n    return CACHED_MAP;\n  }\n};\nconst getUrl = i => {\n  let url = getSrc(i.src);\n  if (url) {\n    return url;\n  }\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n  if (url) {\n    return getNamedUrl(url, i);\n  }\n  if (i.icon) {\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n    url = getSrc(i.icon[i.mode]);\n    if (url) {\n      return url;\n    }\n  }\n  return null;\n};\nconst getNamedUrl = (iconName, iconEl) => {\n  const url = getIconMap().get(iconName);\n  if (url) {\n    return url;\n  }\n  try {\n    return getAssetPath(`svg/${iconName}.svg`);\n  } catch (e) {\n    console.log('e', e);\n    /**\n     * In the custom elements build version of ionicons, referencing an icon\n     * by name will throw an invalid URL error because the asset path is not defined.\n     * This catches that error and logs something that is more developer-friendly.\n     * We also include a reference to the ion-icon element so developers can\n     * figure out which instance of ion-icon needs to be updated.\n     */\n    console.warn(`[Ionicons Warning]: Could not load icon with name \"${iconName}\". Ensure that the icon is registered using addIcons or that the icon SVG data is passed directly to the icon component.`, iconEl);\n  }\n};\nconst getName = (iconName, icon, mode, ios, md) => {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n  // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  } else if (md && mode === 'md') {\n    iconName = toLower(md);\n  } else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  }\n  // only allow alpha characters and dash\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n  if (invalidChars !== '') {\n    return null;\n  }\n  return iconName;\n};\nconst getSrc = src => {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\nconst isSrc = str => str.length > 0 && /(\\/|\\.)/.test(str);\nconst isStr = val => typeof val === 'string';\nconst toLower = val => val.toLowerCase();\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n  const attributeObject = {};\n  attributes.forEach(attr => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\n/**\n * Returns `true` if the document or host element\n * has a `dir` set to `rtl`. The host value will always\n * take priority over the root document value.\n */\nconst isRTL = hostEl => {\n  if (hostEl) {\n    if (hostEl.dir !== '') {\n      return hostEl.dir.toLowerCase() === 'rtl';\n    }\n  }\n  return (document === null || document === void 0 ? void 0 : document.dir.toLowerCase()) === 'rtl';\n};\nconst validateContent = svgContent => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // setup this way to ensure it works on our buddy IE\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    const svgClass = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n    // root element must be an svg\n    // lets double check we've got valid elements\n    // do not allow scripts\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\nconst isValid = elm => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const name = elm.attributes[i].name;\n      if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nconst isSvgDataUrl = url => url.startsWith('data:image/svg+xml');\nconst isEncodedDataUrl = url => url.indexOf(';utf8,') !== -1;\nconst ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\n/**\n * Safely fallback to an empty svg\n */\nfunction safeFallback(url) {\n  const svg = '';\n  ioniconContent.set(url, svg);\n  return svg;\n}\nconst getSvgContent = (url, sanitize) => {\n  /**\n   * See if we already have a request for this url\n   */\n  const req = requests.get(url);\n  if (req) {\n    return req;\n  }\n  if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n    /**\n     * If the url is a data url of an svg, then try to parse it\n     * with the DOMParser. This works with content security policies enabled.\n     */\n    if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n      return Promise.resolve(getSvgByUrl(url));\n    }\n    return fetchSvg(url, sanitize);\n  }\n  return Promise.resolve(safeFallback(url));\n};\nfunction getSvgByUrl(url) {\n  if (!parser) {\n    /**\n     * Create an instance of the DOM parser. This creates a single\n     * parser instance for the entire app, which is more efficient.\n     */\n    parser = new DOMParser();\n  }\n  const doc = parser.parseFromString(url, 'text/html');\n  const svg = doc.querySelector('svg');\n  if (svg) {\n    ioniconContent.set(url, svg.outerHTML);\n    return svg.outerHTML;\n  }\n  throw new Error(`Could not parse svg from ${url}`);\n}\nfunction fetchSvg(url, sanitize) {\n  /**\n   * We don't already have a request\n   */\n  const req = fetch(url).then(rsp => {\n    /**\n     * When fetching from a file:// URL, some browsers return\n     * a 0 status code even when the request succeeds so don't\n     * rely on rsp.ok as the only signal of success.\n     */\n    return rsp.text().then(svgContent => {\n      if (svgContent && sanitize !== false) {\n        svgContent = validateContent(svgContent);\n      }\n      const svg = svgContent || '';\n      ioniconContent.set(url, svg);\n      return svg;\n    }).catch(() => safeFallback(url));\n  }).catch(() => safeFallback(url));\n  /**\n   * Cache for the same requests\n   */\n  requests.set(url, req);\n  return req;\n}\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;-webkit-box-sizing:content-box !important;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}@supports (background: -webkit-named-image(i)){:host(.icon-rtl) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}}@supports not selector(:dir(rtl)) and selector(:host-context([dir='rtl'])){:host(.icon-rtl) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}}:host(.flip-rtl):host-context([dir='rtl']) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}@supports selector(:dir(rtl)){:host(.flip-rtl:dir(rtl)) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}:host(.flip-rtl:dir(ltr)) .icon-inner{-webkit-transform:scaleX(1);transform:scaleX(1)}}:host(.icon-small){font-size:1.125rem !important}:host(.icon-large){font-size:2rem !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\nconst Icon = /*@__PURE__*/proxyCustomElement(class Icon extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.iconName = null;\n    this.inheritedAttributes = {};\n    this.didLoadIcon = false;\n    this.isVisible = false;\n    /**\n     * The mode determines which platform styles to use.\n     */\n    this.mode = getIonMode();\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    this.lazy = false;\n    /**\n     * When set to `false`, SVG content that is HTTP fetched will not be checked\n     * if the response SVG content has any `<script>` elements, or any attributes\n     * that start with `on`, such as `onclick`.\n     * @default true\n     */\n    this.sanitize = true;\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n  connectedCallback() {\n    /**\n     * purposely do not return the promise here because loading\n     * the svg file should not hold up loading the app\n     * only load the svg if it's visible\n     */\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n  /**\n   * Loads the icon after the component has finished rendering.\n   */\n  componentDidLoad() {\n    /**\n     * Addresses an Angular issue where property values are assigned after the 'connectedCallback' but prior to the registration of watchers.\n     * This enhancement ensures the loading of an icon when the component has finished rendering and the icon has yet to apply the SVG data.\n     * This modification pertains to the usage of Angular's binding syntax:\n     * `<ion-icon [name]=\"myIconName\"></ion-icon>`\n     */\n    if (!this.didLoadIcon) {\n      this.loadIcon();\n    }\n  }\n  /**\n   * Disconnect the IntersectionObserver.\n   */\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  /**\n   * Wait until the icon is visible in the viewport.\n   * @param el - The element to observe.\n   * @param rootMargin - The root margin of the observer.\n   * @param cb - The callback to call when the element is visible.\n   */\n  waitUntilVisible(el, rootMargin, cb) {\n    /**\n     * IntersectionObserver is a browser API that allows you to observe\n     * the visibility of an element relative to a root element. It is\n     * supported in all modern browsers, except IE and when server-side\n     * rendering.\n     */\n    const hasIntersectionObserverSupport = Boolean(Build.isBrowser && this.lazy && typeof window !== 'undefined' && window.IntersectionObserver);\n    /**\n     * browser doesn't support IntersectionObserver\n     * so just fallback to always show it\n     */\n    if (!hasIntersectionObserverSupport) {\n      return cb();\n    }\n    const io = this.io = new window.IntersectionObserver(data => {\n      if (data[0].isIntersecting) {\n        io.disconnect();\n        this.io = undefined;\n        cb();\n      }\n    }, {\n      rootMargin\n    });\n    io.observe(el);\n  }\n  /**\n   * Watch for changes to the icon name, src, icon, ios, or md properties.\n   * When a change is detected, the icon will be loaded.\n   */\n  loadIcon() {\n    if (Build.isBrowser && this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (ioniconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = ioniconContent.get(url);\n        } else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => this.svgContent = ioniconContent.get(url));\n        }\n        this.didLoadIcon = true;\n      }\n    }\n    this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n  }\n  render() {\n    const {\n      flipRtl,\n      iconName,\n      inheritedAttributes,\n      el\n    } = this;\n    const mode = this.mode || 'md';\n    /**\n     * we have designated that arrows & chevrons should automatically flip (unless flip-rtl\n     * is set to false) because \"back\" is left in ltr and right in rtl, and \"forward\" is the opposite\n     */\n    const shouldAutoFlip = iconName ? (iconName.includes('arrow') || iconName.includes('chevron')) && flipRtl !== false : false;\n    /**\n     * if shouldBeFlippable is true, the icon should change direction when `dir` changes\n     */\n    const shouldBeFlippable = flipRtl || shouldAutoFlip;\n    return h(Host, Object.assign({\n      key: '0578c899781ca145dd8205acd9670af39b57cf2e',\n      role: \"img\",\n      class: Object.assign(Object.assign({\n        [mode]: true\n      }, createColorClasses(this.color)), {\n        [`icon-${this.size}`]: !!this.size,\n        'flip-rtl': shouldBeFlippable,\n        'icon-rtl': shouldBeFlippable && isRTL(el)\n      })\n    }, inheritedAttributes), Build.isBrowser && this.svgContent ? h(\"div\", {\n      class: \"icon-inner\",\n      innerHTML: this.svgContent\n    }) : h(\"div\", {\n      class: \"icon-inner\"\n    }));\n  }\n  static get assetsDirs() {\n    return [\"svg\"];\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"name\": [\"loadIcon\"],\n      \"src\": [\"loadIcon\"],\n      \"icon\": [\"loadIcon\"],\n      \"ios\": [\"loadIcon\"],\n      \"md\": [\"loadIcon\"]\n    };\n  }\n  static get style() {\n    return iconCss;\n  }\n}, [257, \"ion-icon\", {\n  \"mode\": [1025],\n  \"color\": [1],\n  \"ios\": [1],\n  \"md\": [1],\n  \"flipRtl\": [4, \"flip-rtl\"],\n  \"name\": [513],\n  \"src\": [1],\n  \"icon\": [8],\n  \"size\": [1],\n  \"lazy\": [4],\n  \"sanitize\": [4],\n  \"svgContent\": [32],\n  \"isVisible\": [32]\n}, undefined, {\n  \"name\": [\"loadIcon\"],\n  \"src\": [\"loadIcon\"],\n  \"icon\": [\"loadIcon\"],\n  \"ios\": [\"loadIcon\"],\n  \"md\": [\"loadIcon\"]\n}]);\n/**\n * Get the mode of the document.\n * @returns The mode of the document.\n */\nconst getIonMode = () => Build.isBrowser && typeof document !== 'undefined' && document.documentElement.getAttribute('mode') || 'md';\n/**\n * Create color classes for the icon.\n * @param color - The color of the icon.\n * @returns The color classes for the icon.\n */\nconst createColorClasses = color => {\n  return color ? {\n    'ion-color': true,\n    [`ion-color-${color}`]: true\n  } : null;\n};\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-icon\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-icon\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Icon);\n        }\n        break;\n    }\n  });\n}\nexport { Icon as I, defineCustomElement as d };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}