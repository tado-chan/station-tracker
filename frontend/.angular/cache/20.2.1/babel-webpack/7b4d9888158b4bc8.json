{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { b as getIonMode } from './ionic-global.js';\nconst selectOptionCss = \":host{display:none}\";\nconst SelectOption = /*@__PURE__*/proxyCustomElement(class SelectOption extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.inputId = `ion-selopt-${selectOptionIds++}`;\n    /**\n     * If `true`, the user cannot interact with the select option. This property does not apply when `interface=\"action-sheet\"` as `ion-action-sheet` does not allow for disabled buttons.\n     */\n    this.disabled = false;\n  }\n  render() {\n    return h(Host, {\n      key: '3a70eea9fa03a9acba582180761d18347c72acee',\n      role: \"option\",\n      id: this.inputId,\n      class: getIonMode(this)\n    });\n  }\n  get el() {\n    return this;\n  }\n  static get style() {\n    return selectOptionCss;\n  }\n}, [257, \"ion-select-option\", {\n  \"disabled\": [4],\n  \"value\": [8]\n}]);\nlet selectOptionIds = 0;\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-select-option\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-select-option\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, SelectOption);\n        }\n        break;\n    }\n  });\n}\nconst IonSelectOption = SelectOption;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonSelectOption, defineCustomElement };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}